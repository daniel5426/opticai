// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  electronAPI: {
    // Client operations
    getAllClients: () => Promise<any[]>;
    getClient: (id: number) => Promise<any>;
    createClient: (clientData: any) => Promise<any>;
    updateClient: (clientData: any) => Promise<any>;
    deleteClient: (id: number) => Promise<boolean>;

    // Exam operations
    getExamsByClient: (clientId: number) => Promise<any[]>;
    getExam: (examId: number) => Promise<any>;
    createExam: (examData: any) => Promise<any>;
    updateExam: (examData: any) => Promise<any>;
    deleteExam: (examId: number) => Promise<boolean>;

    // Eye Exam operations
    getEyeExamsByExam: (examId: number) => Promise<any[]>;
    createEyeExam: (eyeExamData: any) => Promise<any>;
    updateEyeExam: (eyeExamData: any) => Promise<any>;

    // Order operations
    getOrdersByClient: (clientId: number) => Promise<any[]>;
    getOrder: (orderId: number) => Promise<any>;
    createOrder: (orderData: any) => Promise<any>;
    updateOrder: (orderData: any) => Promise<any>;
    deleteOrder: (orderId: number) => Promise<boolean>;

    // Order Eye operations
    getOrderEyesByOrder: (orderId: number) => Promise<any[]>;
    createOrderEye: (orderEyeData: any) => Promise<any>;
    updateOrderEye: (orderEyeData: any) => Promise<any>;

    // Order Lens operations
    getOrderLensByOrder: (orderId: number) => Promise<any>;
    createOrderLens: (orderLensData: any) => Promise<any>;
    updateOrderLens: (orderLensData: any) => Promise<any>;

    // Frame operations
    getFrameByOrder: (orderId: number) => Promise<any>;
    createFrame: (frameData: any) => Promise<any>;
    updateFrame: (frameData: any) => Promise<any>;

    // Medical Log operations
    getMedicalLogsByClient: (clientId: number) => Promise<any[]>;
    createMedicalLog: (logData: any) => Promise<any>;
  };
}

export {};

declare module "*.css";
declare module "*.scss";
declare module "*.sass";
declare module "*.png" {
  const content: string;
  export default content;
}
declare module "*.jpg" {
  const content: string;
  export default content;
}
declare module "*.svg" {
  const content: string;
  export default content;
}
