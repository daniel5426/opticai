---
description: 
globs: 
alwaysApply: true
---
# Electron-Vite-React Project Overview

This project is an Electron desktop application built with Vite, React, and TypeScript. The project includes SQLite database integration for data persistence and uses shadcn/ui for UI components. An all-in-one **multi-clinic management system** for optical clinics and stores, handling patient records, medical and optical exams, orders, billing, and inventory across multiple clinic locations under a company structure.

## Multi-Clinic Architecture

The application now supports a **hierarchical multi-clinic structure**:
- **Companies** → **Clinics** → **Users/Data**
- Each company can manage multiple clinic locations
- Data isolation between clinics while maintaining centralized company management
- Flexible user access: global company users or clinic-specific users

### Application Flow
1. **Welcome Screen** (`/`) - Entry point with two main options
2. **Control Center Flow** (`/control-center/*`) - Company management and setup
3. **Clinic Entrance Flow** (`/clinic-entrance` → `/user-selection`) - Individual clinic access
4. **Clinic Operations** (`/dashboard`, `/clients`, etc.) - Standard clinic functionality

### New Pages & Components
- **WelcomeScreen** (`src/pages/WelcomeScreen.tsx`) - Initial entry point
- **ControlCenterPage** (`src/pages/ControlCenterPage.tsx`) - Company login/registration
- **ControlCenterDashboardPage** (`src/pages/ControlCenterDashboardPage.tsx`) - Company overview
- **ControlCenterUsersPage** (`src/pages/ControlCenterUsersPage.tsx`) - Global user management
- **ControlCenterClinicsPage** (`src/pages/ControlCenterClinicsPage.tsx`) - Clinic management
- **SetupWizardPage** (`src/pages/SetupWizardPage.tsx`) - Initial clinic setup
- **ClinicEntrancePage** (`src/pages/ClinicEntrancePage.tsx`) - Clinic ID input
- **UserSelectionPage** (`src/pages/UserSelectionPage.tsx`) - Enhanced with clinic context

### Database Schema Extensions
- **companies** table - Company information and ownership
- **clinics** table - Individual clinic locations with unique IDs
- **clinic_id** field added to existing tables for data isolation
- Enhanced user management with company/clinic associations

## UI Components

The application uses [shadcn/ui](mdc:https:/ui.shadcn.com) for UI components, which provides:
- Beautifully designed components
- Accessibility-focused design
- Tailwind CSS for styling
- Customizable and reusable components

ALWAYS FOLLOW THOSE GUIDELINE FOR UI:
- Its an app in hebrew, so ui need to be rtl
- each new page created should be added a button in the appsidebar to go to it
- ALWAYS in every page or component use: style={{scrollbarWidth: 'none'}}
  to hide the vizible scrollbar without removing the functionality of scrolling
- ALWAYS if you want to create a modal use the [src/components/ui/cusom-modal.tsx](mdc:src/components/ui/cusom-modal.tsx) component
- When creating classic buttons try to use icons instead of label text, use text only if its an unusual button
- try to not have dupclicated codes, create components when a part of code is used multiple time.

## Routing System

The application uses [TanStack Router](mdc:https:/tanstack.com/router) for client-side routing:
- Memory-based router optimized for Electron applications
- Declarative route definitions in `src/routes/routes.tsx`
- Root layout with outlet pattern in `src/routes/__root.tsx` 
- Navigation through `Link` components:
  ```tsx
  <Link to="/path">Link Text</Link>
  ```
- Clean, type-safe routing with automatic type generation
- Route parameters and nested routes support

## Database System

The application uses SQLite with better-sqlite3 for local data persistence. The database system has been updated to support multi-clinic architecture with a simplified IPC communication pattern.

### Key Database Features
- **Simplified IPC Handler**: Uses `window.electronAPI.db(method, ...args)` pattern exposed via preload script
- **Multi-Clinic Support**: Database schema supports company → clinic → data hierarchy
- **Data Isolation**: Clinic-specific data filtering with `clinic_id` foreign keys
- **Conditional Seeding**: Sample data only created when companies exist (multi-clinic mode)
- **WAL Mode**: Write-Ahead Logging for better performance
- **Foreign Keys**: Enabled for referential integrity
- **Auto-initialization**: Tables created on first run with conditional seed data
- **TypeScript Integration**: Fully typed interfaces for all entities

### API Usage Pattern
All database operations now use the consistent pattern:
```typescript
// Correct usage
const result = await window.electronAPI.db('methodName', param1, param2);

// Examples
const companies = await window.electronAPI.db('getAllCompanies');
const clinic = await window.electronAPI.db('getClinicByUniqueId', clinicId);
const users = await window.electronAPI.db('getUsersByClinicId', clinicId);
```

### Multi-Clinic Database Schema

The database now includes these core multi-clinic tables:

#### Companies Table
```sql
CREATE TABLE IF NOT EXISTS companies (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL UNIQUE,
  owner_name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  address TEXT,
  location TEXT,
  logo_path TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

#### Clinics Table
```sql
CREATE TABLE IF NOT EXISTS clinics (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  company_id INTEGER NOT NULL,
  name TEXT NOT NULL,
  address TEXT,
  phone TEXT,
  email TEXT,
  manager_name TEXT,
  license_number TEXT,
  unique_id TEXT NOT NULL UNIQUE,
  is_active BOOLEAN DEFAULT 1,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (company_id) REFERENCES companies (id)
);
```

#### Enhanced Users Table
```sql
CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT NOT NULL,
  password TEXT NOT NULL,
  role TEXT NOT NULL DEFAULT 'user',
  company_id INTEGER,
  clinic_id INTEGER,
  full_name TEXT,
  email TEXT,
  phone TEXT,
  is_active BOOLEAN DEFAULT 1,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (company_id) REFERENCES companies (id),
  FOREIGN KEY (clinic_id) REFERENCES clinics (id)
);
```

### Making Database Schema Changes

**⚠️ IMPORTANT**: When adding new database entities or modifying schemas:

#### 1. Schema Definition (`src/lib/db/schema.ts`)
Define the TypeScript interface and add the `CREATE TABLE` statement in the `createTables` function.
```typescript
// Add/update interface
export interface TableName {
  id?: number;
  clinic_id?: number; // Add for multi-clinic support
  new_field?: string;
  // ... existing fields
}

// Add table creation in createTables function
CREATE TABLE IF NOT EXISTS table_name (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  clinic_id INTEGER,
  new_field TEXT,
  FOREIGN KEY (clinic_id) REFERENCES clinics (id),
  // ... existing fields
);
```

#### 2. Database Service Methods (`src/lib/db/index.ts`)
Add the corresponding CRUD methods to the `DatabaseService` class. Include clinic filtering for multi-clinic support.
```typescript
// Add CRUD operations with clinic support
createTableName(data: Omit<TableName, 'id'>): TableName | null {
  // Implementation with clinic_id
}

getTableNamesByClinicId(clinicId: number): TableName[] {
  // Implementation for clinic-specific data
}
// ... other methods
```

#### 3. Frontend Usage
Use the simplified API pattern in components:
```typescript
// Get clinic-specific data
const data = await window.electronAPI.db('getTableNamesByClinicId', clinicId);

// Create with clinic context
const result = await window.electronAPI.db('createTableName', { ...data, clinic_id: clinicId });
```

### Database Reset (Development)
- **Delete** the existing database file from user data directory
- **Restart** the application to recreate with new schema
- Database path: `%APPDATA%/electron-shadcn Template/database.sqlite`

### Common Issues & Solutions

**"DB method '...' not found" Errors:**
- Ensure the method name in your renderer call (e.g., `connectionManager.myMethod()`) exactly matches the method name in the `DatabaseService` class in `src/lib/db/index.ts`.
- Make sure you have restarted the application after making changes to [src/lib/db/index.ts](mdc:src/lib/db/index.ts).

**"Column doesn't exist" Errors:**
- Delete old database file to recreate schema
- Ensure new fields are included in both interface and CREATE TABLE
- Update all INSERT/UPDATE statements with new fields


### Best Practices
- Always use TypeScript interfaces for type safety
- Keep schema definitions and database service in sync
- Use the `connectionManager` via wrapper functions in `*-db.ts` files for all database calls from the renderer process.
- Test database operations after schema changes
- Use proper error handling in database operations
- Delete old database during development when schema changes
