---
description: 
globs: 
alwaysApply: true
---
# Electron-Vite-React Project Overview

This project is an Electron desktop application built with Vite, React, and TypeScript. The project includes SQLite database integration for data persistence and uses shadcn/ui for UI components.An all-in-one management system for optical clinics and stores, handling patient records, medical and optical exams, orders, billing, and inventory.
Streamlines clinic operations from eye exams to lens and frame orders, ensuring efficient and accurate patient care.

## UI Components

The application uses [shadcn/ui](mdc:https:/ui.shadcn.com) for UI components, which provides:
- Beautifully designed components
- Accessibility-focused design
- Tailwind CSS for styling
- Customizable and reusable components
- Its an app in hebrew, so ui need to be rtl
- each new page created should be added a button in the appsidebar to go to it
- ALWAYS in every page or component use: style={{scrollbarWidth: 'none'}}
  to hide the vizible scrollbar without removing the functionality of scrolling

## Routing System

The application uses [TanStack Router](mdc:https:/tanstack.com/router) for client-side routing:
- Memory-based router optimized for Electron applications
- Declarative route definitions in `src/routes/routes.tsx`
- Root layout with outlet pattern in `src/routes/__root.tsx` 
- Navigation through `Link` components:
  ```tsx
  <Link to="/path">Link Text</Link>
  ```
- Clean, type-safe routing with automatic type generation
- Route parameters and nested routes support

## Database System

The application uses SQLite with better-sqlite3 for local data persistence:

### Database Structure
- **Location**: `database.sqlite` in Electron's user data directory
- **Service**: Centralized `DatabaseService` class in `src/lib/db/index.ts`
- **Schema**: TypeScript interfaces and table definitions in `src/lib/db/schema.ts`
- **API Layer**: Database wrapper functions in `src/lib/db/` (e.g., `clients-db.ts`, `orders-db.ts`)

### Key Database Features
- **WAL Mode**: Write-Ahead Logging for better performance
- **Foreign Keys**: Enabled for referential integrity
- **Auto-initialization**: Tables created on first run with seed data
- **TypeScript Integration**: Fully typed interfaces for all entities

### Making Database Schema Changes

**⚠️ IMPORTANT**: When adding new database entities or modifying schemas, follow this complete process:

#### 1. Schema Definition (`src/lib/db/schema.ts`)
```typescript
// Add/update interface
export interface TableName {
  id?: number;
  new_field?: string;
  foreign_key_id?: number;
  // ... existing fields
}

// Add table creation in createTables function
CREATE TABLE IF NOT EXISTS table_name (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  new_field TEXT,
  foreign_key_id INTEGER,
  -- Use ON DELETE CASCADE for proper cascading deletes
  FOREIGN KEY(foreign_key_id) REFERENCES parent_table(id) ON DELETE CASCADE
);
```

#### 2. Database Service Methods (`src/lib/db/index.ts`)
```typescript
// Add CRUD operations for new entity
createTableName(data: Omit<TableName, 'id'>): TableName | null {
  // Implementation with proper sanitizeValue() calls
}

getTableNameById(id: number): TableName | null {
  // Implementation
}

updateTableName(data: TableName): TableName | null {
  // Implementation with all fields
}

deleteTableName(id: number): boolean {
  // Simple delete - cascading handled by DB constraints
}
```

#### 3. IPC Handlers (`src/main.ts`)
```typescript
// Add IPC handlers for all CRUD operations
ipcMain.handle('db-create-table-name', async (_, data) => {
  return dbService.createTableName(data);
});

ipcMain.handle('db-get-table-name', async (_, id) => {
  return dbService.getTableNameById(id);
});

ipcMain.handle('db-update-table-name', async (_, data) => {
  return dbService.updateTableName(data);
});

ipcMain.handle('db-delete-table-name', async (_, id) => {
  return dbService.deleteTableName(id);
});
```

#### 4. Preload API (`src/preload.ts`)
```typescript
// Expose functions to renderer process
createTableName: (data: any) => ipcRenderer.invoke('db-create-table-name', data),
getTableNameById: (id: number) => ipcRenderer.invoke('db-get-table-name', id),
updateTableName: (data: any) => ipcRenderer.invoke('db-update-table-name', data),
deleteTableName: (id: number) => ipcRenderer.invoke('db-delete-table-name', id),
```

#### 5. ElectronAPI Types (`src/types/electron.d.ts`)
```typescript
// Add type declarations
interface ElectronAPI {
  // ... existing methods
  createTableName: (data: Omit<TableName, 'id'>) => Promise<TableName | null>;
  getTableNameById: (id: number) => Promise<TableName | null>;
  updateTableName: (data: TableName) => Promise<TableName | null>;
  deleteTableName: (id: number) => Promise<boolean>;
}
```

#### 6. API Layer (`src/lib/db/table-name-db.ts`)
```typescript
// Create wrapper functions for UI components
export async function createTableName(data: Omit<TableName, 'id'>): Promise<TableName | null> {
  try {
    return await window.electronAPI.createTableName(data);
  } catch (error) {
    console.error('Error creating table name:', error);
    return null;
  }
}
// ... other CRUD wrapper functions
```

#### 7. Database Reset (Development)
- **Delete** the existing database file from user data directory
- **Restart** the application to recreate with new schema
- Database path: `%APPDATA%/electron-shadcn Template/database.sqlite`

#### 8. Common Issues & Solutions

**Foreign Key Constraint Errors:**
- Ensure all foreign key relationships use `ON DELETE CASCADE`
- Verify parent records exist before creating child records
- Use proper cascading deletes instead of manual deletion chains

**"No handler registered" Errors:**
- Check all 4 layers: main.ts → preload.ts → electron.d.ts → wrapper functions
- Ensure IPC channel names match exactly across all files
- Verify functions are properly exposed in preload API

**"Column doesn't exist" Errors:**
- Delete old database file to recreate schema
- Ensure new fields are included in both interface and CREATE TABLE
- Update all INSERT/UPDATE statements with new fields

### Database Entities
- **Clients**: Patient information and demographics
- **Medical Logs**: Medical history and notes
- **Optical Exams**: Vision test results and measurements
- **Optical Eye Exams**: Per-eye detailed exam data
- **Orders**: Eyewear orders (independent of exams)
- **Order Eyes**: Per-eye prescription data for orders
- **Order Lens**: Lens specifications for orders
- **Frames**: Frame details for orders
- **Contact Lens**: Contact lens exam data
- **Contact Eye**: Per-eye contact lens data
- **Contact Lens Orders**: Contact lens order details
- **Billing**: Billing and payment information
- **Order Line Items**: Detailed billing line items

### Best Practices
- Always use TypeScript interfaces for type safety
- Keep schema definitions and database service in sync
- Use the wrapper functions in `*-db.ts` files instead of direct database calls
- Test database operations after schema changes
- Use proper error handling in database operations
- Delete old database during development when schema changes
